1. В майбутньому на склад будуть додаватися не тільки продукти, а і інші товари.
Тому я вирішив створити інтерфейс IGoods, який буде визначати основні властивості для нових товарів,
а саме назва, ціна і вага, а також метод зміни ціни.
Реалізував цей інтерфейс тільки для класу Product, адже від нього наслідуються Meat та Dairy.
Провів певні зміни у коді впроваджуючи IGoods.

2. Вирішив не створювати ніяких інтерфейсів для класу Storage,
адже з самого початку написання цього проєкту вирішив зробити його статичним
(тобто необізнано вибрав більш функціональний варіант, аніж в дусі ООП).
У зв'язку з цим, вирішив замінити недостаток цього варіанту тотожним,
при якому різні склади товарів зберігаються в базі даних (у .txt файлах)
та можуть завантажуватися і зберігатися в статичному класі Storage для будь-якої взаємодії з ними або між ними.
Тобто вийшло так, що клас Storage може утримувати в собі N-у кількість різних листів продуктів (склад складів).

3. У проєкту є наступні недоліки:

- проєкт є сильно прив'язаним до вже існуючих продуктів, тому більшість сервісів не зможе коректно працювати з новими товарами без змін у коді
(наприклад, при зчитуванні і записі в базу даних, кінцева таблиця товарів має розширюватися на нові стовпці,
або ж, якщо ми захочемо змінити певне поле нового товару, то для цього буде потрібно змінювати код, додаючи таку можливість для нового товару).
Але якщо відштовхуватися від саме цих продуктів, то є варіант створити інтерфейси не тільки для Product, а і для Meat та Dairy - у такому випадку майже весь проєкт буде працювати корректно.

- клас UserInterface є дуже обширним та утримує в собі функціонал, який мав би бути поділеним на інші класи (в кінцевому варіанті відповідає за взаємодію між клієнтом і проєктом).